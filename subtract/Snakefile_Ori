# absolute path
PAIRS, = glob_wildcards('/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{pair}.mapped.fq.gz')
# then PAIRS would be [ "ERRXYZ.x.genomeABC", "ERRXYZ.x.genomeDEF"]
print(PAIRS)

rule all:
    input:
        expand("{pair}.combined.csv", pair=PAIRS),

# MEGAHIT assemble mapped reads
rule mapped_assembly:
    input:
        mapped_reads="/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.mapped.fq.gz",

    output:
        mapped_assembly= "{metagenome}.x.{genome}.mapped.assembly.fa",
        dir = directory("{metagenome}.x.{genome}.p_megahit.d"),

    conda: "env-diff.yml"
    threads: 32
    shell: """
        megahit -f -t {threads} -r {input.mapped_reads} -o {output.dir}
        cp {output.dir}/final.contigs.fa {output.mapped_assembly}
    """

# minimap align mapped_reads to the assembly
rule minimap:
    input:
        mapped_assembly= "{metagenome}.x.{genome}.mapped.assembly.fa",
        mapped_reads="/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.mapped.fq.gz",
        
    output:
        minimap= "{metagenome}.x.{genome}.reads.x.assembly.bam",
        
    conda: "env-diff.yml"
    threads: 32
    shell: """
        minimap2 -ax sr -t 32 {input.mapped_assembly} {input.mapped_reads} | samtools view -b -F 4 - | samtools sort - > {output.minimap}
    """

# .bam to .fq file
rule samtool:
    input:
        bamfile= "{metagenome}.x.{genome}.reads.x.assembly.bam",
        
    output:
        samfile= "{metagenome}.x.{genome}.reads.x.assembly.fq.gz",
        
    conda: "env-diff.yml"
    threads: 1
    shell: """
        samtools bam2fq {input.bamfile} | gzip -9c > {output.samfile}
    """    

# compare total mapped_reads vs. the ones used for assembly, identify diff_reads
rule diff_output:
    input:
        mapped_reads="/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.mapped.fq.gz",
        samfile= "{metagenome}.x.{genome}.reads.x.assembly.fq.gz",
        
    output:
        diff= "{metagenome}.x.{genome}.diff.fq.gz",
    
    conda: "env-diff.yml"    
    threads: 1
    shell: """
        ./output-diff-reads.py {input.mapped_reads} {input.samfile} -o {output.diff}
        gzip {output.diff}
    """

# minimap align diff_reads to reference genome
rule diff_map:
    input:
        diff= "{metagenome}.x.{genome}.diff.fq.gz",
        mapped_genome="/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/genomes/{genome}_genomic.fna.gz",
        
    output:
        minimap= "{metagenome}.x.{genome}.diff.reads.x.genome.bam",
        
    conda: "env-diff.yml"
    threads: 32
    shell: """
        minimap2 -ax sr -t {threads} {input.mapped_genome} {input.diff} | samtools view -b -F 4 - | samtools sort - > {output.minimap}
    """

# minimap align assemble_reads to reference genom
rule assemble_map:
    input:
        assemble= "{metagenome}.x.{genome}.reads.x.assembly.fq.gz",
        mapped_genome="/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/genomes/{genome}_genomic.fna.gz",
        
    output:
        minimap= "{metagenome}.x.{genome}.assemble.reads.x.genome.bam",
        
    conda: "env-diff.yml"
    threads: 32
    shell: """
        minimap2 -ax sr -t {threads} {input.mapped_genome} {input.assemble} | samtools view -b -F 4 - | samtools sort - > {output.minimap}
    """

rule sort:
    input:
        bamfile= "{filename}.bam",
    output:
        sortfile= "{filename}.sort.bam",

    conda: "env-diff.yml"
    threads: 1
    shell: """
        samtools sort {input.bamfile} -o {output.sortfile}
    """

rule index:
    input:
        sortfile= "{filename}.sort.bam",
    output:
        indexfile= "{filename}.sort.bam.bai",

    conda: "env-diff.yml"
    threads: 1
    shell: """
        samtools index {input.sortfile}
    """

# bam1: contain all reads mapped to a genome
# bam2: contain reads that did not mapped to the assembly
# diff_reads csv including coverage
rule diff2_csv:
    input:
        bam1= "/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.depth.txt",
        bam2= "{metagenome}.x.{genome}.diff.reads.x.genome.sort.bam",
        bai2= "{metagenome}.x.{genome}.diff.reads.x.genome.sort.bam.bai",
    output:
        csvfile= "{metagenome}.x.{genome}.diff2.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
    ./calc-coverage-diff-2.py {input.bam1} {input.bam2} -o {output.csvfile}
    """    
# all_reads csv output including the coverage
rule all_csv:
    input:
        depth= "/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.depth.txt",
        bam1= "/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.sort.bam",
        bai1= "/home/zyzhao/2022-assemblyloss/onehuman/grist/outputs.onehuman/mapping/{metagenome}.x.{genome}.sort.bam.bai",
    output:
        csvfile= "{metagenome}.x.{genome}.all.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
        ./calc-coverage-diff-2.py {input.depth} {input.bam1} -o {output.csvfile}
    """
# combine two cvs info for data analysis
rule combined_csv:
    input:
        all= "{metagenome}.x.{genome}.all.csv",
        diff= "{metagenome}.x.{genome}.diff2.csv",
    output:
        combined= "{metagenome}.x.{genome}.combined.csv",
    conda: "env-diff.yml"
    threads: 1
    shell: """
        ./combine-all-diff.py {input.all} {input.diff} -o {output.combined}
    """

